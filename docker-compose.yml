version: "3.9"

x-common-env: &common-env
  DATABASE_URL: postgresql+psycopg://adveritas:adveritas@db:5432/adveritas
  REDIS_URL: redis://redis:6379/0
  # ---- MinIO (S3-compatible) ----
  MINIO_ENDPOINT: http://minio:9000
  MINIO_BUCKET: adveritas
  MINIO_ACCESS_KEY: minioadmin
  MINIO_SECRET_KEY: minioadmin # ---- Models / knobs ----
  EMBED_MODEL: sentence-transformers/all-MiniLM-L6-v2
  CLAIM_MIN_SCORE: "0.35"
  VERDICT_TOPK: "5"

  # ---- AWS Bedrock (Llama 3.2) ----
  USE_BEDROCK: true
  BEDROCK_MODEL_ID: ${BEDROCK_MODEL_ID:-meta.llama3-2-3b-instruct-v1:0}
  AWS_REGION: ${AWS_REGION:-us-east-1}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
  # Optional: bypass YouTube age/region limits (mount a cookies file below)
  YTDLP_COOKIES_PATH: /secrets/youtube_cookies.txt

services:
  # ---------- Postgres with pgvector ----------
  db:
    image: pgvector/pgvector:pg16
    container_name: adveritas-db
    environment:
      POSTGRES_USER: adveritas
      POSTGRES_PASSWORD: adveritas
      POSTGRES_DB: adveritas
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U adveritas -d adveritas" ]
      interval: 5s
      timeout: 3s
      retries: 20

  # ---------- Redis (Celery broker/backend) ----------
  redis:
    image: redis:7-alpine
    container_name: adveritas-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20

  # ---------- MinIO (S3-compatible object storage) ----------
  minio:
    image: quay.io/minio/minio:latest
    container_name: adveritas-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web console
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 3s
      retries: 20

  # ---------- FastAPI backend (hot-reload) ----------
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: adveritas-api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
      # optional cookies file for yt-dlp (uncomment if you have it)
      # - ./secrets/youtube_cookies.txt:/secrets/youtube_cookies.txt:ro
    ports:
      - "8000:8000"
    environment:
      <<: *common-env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  # ---------- Celery worker (unified app) ----------
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: adveritas-worker
    command: celery -A app.celery_app.celery_app worker -l INFO --concurrency=1
    volumes:
      - ./backend:/app
      # optional cookies file for yt-dlp
      # - ./secrets/youtube_cookies.txt:/secrets/youtube_cookies.txt:ro
    environment:
      <<: *common-env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
  # ---------- (Optional) Frontend dev server ----------
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: adveritas-frontend
  #   command: npm run dev -- --host
  #   volumes:
  #     - ./frontend:/usr/src/app
  #   ports:
  #     - "5173:5173"
  #   depends_on:
  #     - api

volumes:
  dbdata:
  minio_data:
